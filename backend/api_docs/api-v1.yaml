openapi: 3.0.0
info:
  title: FightPandemics API
  version: '1.0'
  description: The API for fightpandemics.com
  license:
    name: MIT
servers:
  - url: 'http://fightpandemics.com/api'
    description: FightPandemics API V1
  - url: 'http://localhost:8000/api'
    description: Local API V1
paths:
  /posts:
    get:
      summary: List all posts
      parameters:
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: A pages list of posts.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
      responses:
        '200':
          description: A single post.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
  '/posts/{postId}':
    parameters:
      - name: postId
        in: path
        description: The id of the post
        required: true
        schema:
          type: string
    get:
      summary: Get a post by id
      responses:
        '200':
          description: A single post.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
    patch:
      summary: Update a post by id
      responses:
        '200':
          description: The updated post.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
  '/users/current:':
    get:
      summary: Get logged in user
      responses:
        '200':
          description: The currently logged-in user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  '/users/{userId}':
    get:
      summary: Get a user by id
      parameters:
        - name: userId
          in: path
          description: The id of the user
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A single user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
components:
  schemas:
    Error:
      title: Error
      type: object
      description: A standard error object.
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
      required:
        - code
    User:
      title: User
      type: object
      properties:
        id:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        accessToken:
          type: string
        dateJoined:
          type: string
        location:
          type: object
      required:
        - id
    Organisation:
      title: Organisation
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        name:
          type: string
      required:
        - id
        - userId
        - name
    Post:
      title: Post
      type: object
      properties:
        id:
          type: string
        authorId:
          type: string
        title:
          type: string
        description:
          type: string
        type:
          type: array
          items:
            type: string
        shareWith:
          type: array
          items:
            type: string
        looking:
          type: array
          items:
            type: string
        needs:
          type: array
          items:
            type: string
        comments:
          $ref: '#/components/schemas/Comment'
        tags:
          type: string
        langage:
          type: string
        website:
          type: string
        iosUrl:
          type: string
        androidUrl:
          type: string
        media:
          type: string
        postEmail:
          type: string
      required:
        - id
        - authorId
        - title
        - description
    Comment:
      title: Comment
      type: object
      properties:
        authorId:
          type: string
        postId:
          type: string
        comment:
          type: string
      required:
        - authorId
        - postId
        - comment
  parameters:
    skip:
      name: skip
      in: query
      description: number of items to skip
      schema:
        type: integer
        format: int32
    limit:
      name: limit
      in: query
      description: How many items to return at one time (max 100)
      schema:
        type: integer
        format: int32
  responses:
    Unauthorized:
      description: Unauthorized.
    NotFound:
      description: Entity not found.
    IllegalInput:
      description: Illegal input for operation.
    GeneralError:
      description: General Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  requestBodies:
    User:
      description: user to add or update
      content: 
        'application/json':
          schema:
            $ref: '#/components/schemas/User'
    Post:
      description: user to add or update
      content: 
        'application/json':
          schema:
            $ref: '#/components/schemas/Post'
  securitySchemes:
    API Key - 1:
      name: API Key
      type: apiKey
      in: query
